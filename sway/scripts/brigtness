#!/usr/bin/env bash

# from https://bbs.archlinux.org/viewtopic.php?id=134972 and modified:

NEW_VALUE=${1:-0} # percent, +-percent, lower or higher

# base dir for backlight class
basedir="/sys/class/backlight"

# get the backlight handler
handler=$basedir/$(ls $basedir |head -n 1)

# get current brightness
old_brightness=$(cat $handler"/brightness")

# get max brightness
max_brightness=$(cat $handler"/max_brightness")

# get current brightness %
old_brightness_p=$(( 100 * old_brightness / max_brightness ))

new_brightness=
new_brightness_p=

# calculate new brightness %
case "$NEW_VALUE" in
    [+-]*)
        new_brightness_p=$(( old_brightness_p + NEW_VALUE ))
        ;;

    # set brightness logarithmically by factor 1.4
    # .72 is just slightly bigger than 1 / 1.4
    lower)
        new_brightness=$( echo $old_brightness | awk '{ print int($1 / 1.4) }' )
        ;;
    higher)
        new_brightness=$( echo $old_brightness | awk '{ print int(($1 + .72) * 1.4) }' )
        ;;

    *) # assume a percent
        new_brightness_p=$NEW_VALUE
        ;;
esac

# calculate new_brightness if we haven't already done it:
[[ "$new_brightness" ]] || new_brightness=$(( max_brightness * new_brightness_p / 100 ))
(( new_brightness > max_brightness )) && new_brightness=$max_brightness
(( new_brightness < 0 )) && new_brightness=0

# calculate new_brightness_p if we haven't already done it:
[[ "$new_brightness_p" ]] || new_brightness_p=$(( 100 * new_brightness / max_brightness ))
(( new_brightness_p > 100 )) && new_brightness_p=100
(( new_brightness_p < 0 )) && new_brightness_p=0

# set the new brightness value
echo $new_brightness | sudo tee $handler"/brightness" > /dev/null
# visual feedback:
mywob $new_brightness_p
#This is my wrapper for 'wob' which needs no fiddling with sway config and starts the daemon on demand:
